// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftRpcClient is the client API for RaftRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftRpcClient interface {
	RequestVote(ctx context.Context, opts ...grpc.CallOption) (RaftRpc_RequestVoteClient, error)
	AppendEntries(ctx context.Context, opts ...grpc.CallOption) (RaftRpc_AppendEntriesClient, error)
	ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdResponse, error)
}

type raftRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftRpcClient(cc grpc.ClientConnInterface) RaftRpcClient {
	return &raftRpcClient{cc}
}

func (c *raftRpcClient) RequestVote(ctx context.Context, opts ...grpc.CallOption) (RaftRpc_RequestVoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaftRpc_ServiceDesc.Streams[0], "/api.RaftRpc/RequestVote", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftRpcRequestVoteClient{stream}
	return x, nil
}

type RaftRpc_RequestVoteClient interface {
	Send(*RequestVoteArguments) error
	Recv() (*RequestVoteResults, error)
	grpc.ClientStream
}

type raftRpcRequestVoteClient struct {
	grpc.ClientStream
}

func (x *raftRpcRequestVoteClient) Send(m *RequestVoteArguments) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftRpcRequestVoteClient) Recv() (*RequestVoteResults, error) {
	m := new(RequestVoteResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftRpcClient) AppendEntries(ctx context.Context, opts ...grpc.CallOption) (RaftRpc_AppendEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaftRpc_ServiceDesc.Streams[1], "/api.RaftRpc/AppendEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftRpcAppendEntriesClient{stream}
	return x, nil
}

type RaftRpc_AppendEntriesClient interface {
	Send(*AppendEntriesArguments) error
	Recv() (*AppendEntriesResults, error)
	grpc.ClientStream
}

type raftRpcAppendEntriesClient struct {
	grpc.ClientStream
}

func (x *raftRpcAppendEntriesClient) Send(m *AppendEntriesArguments) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftRpcAppendEntriesClient) Recv() (*AppendEntriesResults, error) {
	m := new(AppendEntriesResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftRpcClient) ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdResponse, error) {
	out := new(CmdResponse)
	err := c.cc.Invoke(ctx, "/api.RaftRpc/ExecCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftRpcServer is the server API for RaftRpc service.
// All implementations must embed UnimplementedRaftRpcServer
// for forward compatibility
type RaftRpcServer interface {
	RequestVote(RaftRpc_RequestVoteServer) error
	AppendEntries(RaftRpc_AppendEntriesServer) error
	ExecCmd(context.Context, *CmdRequest) (*CmdResponse, error)
	mustEmbedUnimplementedRaftRpcServer()
}

// UnimplementedRaftRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRaftRpcServer struct {
}

func (UnimplementedRaftRpcServer) RequestVote(RaftRpc_RequestVoteServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftRpcServer) AppendEntries(RaftRpc_AppendEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftRpcServer) ExecCmd(context.Context, *CmdRequest) (*CmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCmd not implemented")
}
func (UnimplementedRaftRpcServer) mustEmbedUnimplementedRaftRpcServer() {}

// UnsafeRaftRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftRpcServer will
// result in compilation errors.
type UnsafeRaftRpcServer interface {
	mustEmbedUnimplementedRaftRpcServer()
}

func RegisterRaftRpcServer(s grpc.ServiceRegistrar, srv RaftRpcServer) {
	s.RegisterService(&RaftRpc_ServiceDesc, srv)
}

func _RaftRpc_RequestVote_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftRpcServer).RequestVote(&raftRpcRequestVoteServer{stream})
}

type RaftRpc_RequestVoteServer interface {
	Send(*RequestVoteResults) error
	Recv() (*RequestVoteArguments, error)
	grpc.ServerStream
}

type raftRpcRequestVoteServer struct {
	grpc.ServerStream
}

func (x *raftRpcRequestVoteServer) Send(m *RequestVoteResults) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftRpcRequestVoteServer) Recv() (*RequestVoteArguments, error) {
	m := new(RequestVoteArguments)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftRpc_AppendEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftRpcServer).AppendEntries(&raftRpcAppendEntriesServer{stream})
}

type RaftRpc_AppendEntriesServer interface {
	Send(*AppendEntriesResults) error
	Recv() (*AppendEntriesArguments, error)
	grpc.ServerStream
}

type raftRpcAppendEntriesServer struct {
	grpc.ServerStream
}

func (x *raftRpcAppendEntriesServer) Send(m *AppendEntriesResults) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftRpcAppendEntriesServer) Recv() (*AppendEntriesArguments, error) {
	m := new(AppendEntriesArguments)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftRpc_ExecCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRpcServer).ExecCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RaftRpc/ExecCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRpcServer).ExecCmd(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftRpc_ServiceDesc is the grpc.ServiceDesc for RaftRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RaftRpc",
	HandlerType: (*RaftRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCmd",
			Handler:    _RaftRpc_ExecCmd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestVote",
			Handler:       _RaftRpc_RequestVote_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AppendEntries",
			Handler:       _RaftRpc_AppendEntries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "raft_rpc.proto",
}
